# this is the build file for project algorithm
# it is autogenerated by the xmake build system.
# do not edit by hand.

# project
cmake_minimum_required(VERSION 3.15.0)
cmake_policy(SET CMP0091 NEW)
project(algorithm LANGUAGES CXX C)

# target
add_executable(bench-binary-search "")
set_target_properties(bench-binary-search PROPERTIES OUTPUT_NAME "bench-binary-search")
set_target_properties(bench-binary-search PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-binary-search PRIVATE
    include
)
target_include_directories(bench-binary-search PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-binary-search PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-binary-search PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-binary-search PRIVATE nil)
else()
    target_compile_options(bench-binary-search PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-binary-search PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-binary-search PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-binary-search PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-binary-search PRIVATE
    -stdlib=libc++
)
target_sources(bench-binary-search PRIVATE
    src/binary-search/bench.cpp
)

# target
add_executable(bench-binary-tree-maximum-path-sum "")
set_target_properties(bench-binary-tree-maximum-path-sum PROPERTIES OUTPUT_NAME "bench-binary-tree-maximum-path-sum")
set_target_properties(bench-binary-tree-maximum-path-sum PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-binary-tree-maximum-path-sum PRIVATE
    include
)
target_include_directories(bench-binary-tree-maximum-path-sum PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-binary-tree-maximum-path-sum PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-binary-tree-maximum-path-sum PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-binary-tree-maximum-path-sum PRIVATE nil)
else()
    target_compile_options(bench-binary-tree-maximum-path-sum PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-binary-tree-maximum-path-sum PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-binary-tree-maximum-path-sum PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-binary-tree-maximum-path-sum PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-binary-tree-maximum-path-sum PRIVATE
    -stdlib=libc++
)
target_sources(bench-binary-tree-maximum-path-sum PRIVATE
    src/binary-tree-maximum-path-sum/bench.cpp
)

# target
add_executable(bench-course-schedule "")
set_target_properties(bench-course-schedule PROPERTIES OUTPUT_NAME "bench-course-schedule")
set_target_properties(bench-course-schedule PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-course-schedule PRIVATE
    include
)
target_include_directories(bench-course-schedule PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-course-schedule PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-course-schedule PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-course-schedule PRIVATE nil)
else()
    target_compile_options(bench-course-schedule PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-course-schedule PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-course-schedule PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-course-schedule PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-course-schedule PRIVATE
    -stdlib=libc++
)
target_sources(bench-course-schedule PRIVATE
    src/course-schedule/bench.cpp
)

# target
add_executable(bench-delete-node-in-a-bst "")
set_target_properties(bench-delete-node-in-a-bst PROPERTIES OUTPUT_NAME "bench-delete-node-in-a-bst")
set_target_properties(bench-delete-node-in-a-bst PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-delete-node-in-a-bst PRIVATE
    include
)
target_include_directories(bench-delete-node-in-a-bst PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-delete-node-in-a-bst PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-delete-node-in-a-bst PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-delete-node-in-a-bst PRIVATE nil)
else()
    target_compile_options(bench-delete-node-in-a-bst PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-delete-node-in-a-bst PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-delete-node-in-a-bst PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-delete-node-in-a-bst PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-delete-node-in-a-bst PRIVATE
    -stdlib=libc++
)
target_sources(bench-delete-node-in-a-bst PRIVATE
    src/delete-node-in-a-bst/bench.cpp
)

# target
add_executable(bench-find-the-distance-value-between-two-arrays "")
set_target_properties(bench-find-the-distance-value-between-two-arrays PROPERTIES OUTPUT_NAME "bench-find-the-distance-value-between-two-arrays")
set_target_properties(bench-find-the-distance-value-between-two-arrays PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-find-the-distance-value-between-two-arrays PRIVATE
    include
)
target_include_directories(bench-find-the-distance-value-between-two-arrays PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-find-the-distance-value-between-two-arrays PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-find-the-distance-value-between-two-arrays PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-find-the-distance-value-between-two-arrays PRIVATE nil)
else()
    target_compile_options(bench-find-the-distance-value-between-two-arrays PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-find-the-distance-value-between-two-arrays PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-find-the-distance-value-between-two-arrays PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-find-the-distance-value-between-two-arrays PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-find-the-distance-value-between-two-arrays PRIVATE
    -stdlib=libc++
)
target_sources(bench-find-the-distance-value-between-two-arrays PRIVATE
    src/find-the-distance-value-between-two-arrays/bench.cpp
)

# target
add_executable(bench-guess-number-higher-or-lower "")
set_target_properties(bench-guess-number-higher-or-lower PROPERTIES OUTPUT_NAME "bench-guess-number-higher-or-lower")
set_target_properties(bench-guess-number-higher-or-lower PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-guess-number-higher-or-lower PRIVATE
    include
)
target_include_directories(bench-guess-number-higher-or-lower PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-guess-number-higher-or-lower PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-guess-number-higher-or-lower PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-guess-number-higher-or-lower PRIVATE nil)
else()
    target_compile_options(bench-guess-number-higher-or-lower PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-guess-number-higher-or-lower PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-guess-number-higher-or-lower PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-guess-number-higher-or-lower PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-guess-number-higher-or-lower PRIVATE
    -stdlib=libc++
)
target_sources(bench-guess-number-higher-or-lower PRIVATE
    src/guess-number-higher-or-lower/bench.cpp
)

# target
add_executable(bench-kth-largest-element-in-an-array "")
set_target_properties(bench-kth-largest-element-in-an-array PROPERTIES OUTPUT_NAME "bench-kth-largest-element-in-an-array")
set_target_properties(bench-kth-largest-element-in-an-array PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-kth-largest-element-in-an-array PRIVATE
    include
)
target_include_directories(bench-kth-largest-element-in-an-array PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-kth-largest-element-in-an-array PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-kth-largest-element-in-an-array PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-kth-largest-element-in-an-array PRIVATE nil)
else()
    target_compile_options(bench-kth-largest-element-in-an-array PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-kth-largest-element-in-an-array PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-kth-largest-element-in-an-array PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-kth-largest-element-in-an-array PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-kth-largest-element-in-an-array PRIVATE
    -stdlib=libc++
)
target_sources(bench-kth-largest-element-in-an-array PRIVATE
    src/kth-largest-element-in-an-array/bench.cpp
)

# target
add_executable(bench-leetcode "")
set_target_properties(bench-leetcode PROPERTIES OUTPUT_NAME "bench-leetcode")
set_target_properties(bench-leetcode PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-leetcode PRIVATE
    include
)
target_include_directories(bench-leetcode PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-leetcode PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-leetcode PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-leetcode PRIVATE nil)
else()
    target_compile_options(bench-leetcode PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-leetcode PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-leetcode PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-leetcode PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-leetcode PRIVATE
    -stdlib=libc++
)
target_sources(bench-leetcode PRIVATE
    src/leetcode/bench.cpp
)

# target
add_executable(bench-longest-palindromic-substring "")
set_target_properties(bench-longest-palindromic-substring PROPERTIES OUTPUT_NAME "bench-longest-palindromic-substring")
set_target_properties(bench-longest-palindromic-substring PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-longest-palindromic-substring PRIVATE
    include
)
target_include_directories(bench-longest-palindromic-substring PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-longest-palindromic-substring PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-longest-palindromic-substring PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-longest-palindromic-substring PRIVATE nil)
else()
    target_compile_options(bench-longest-palindromic-substring PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-longest-palindromic-substring PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-longest-palindromic-substring PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-longest-palindromic-substring PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-longest-palindromic-substring PRIVATE
    -stdlib=libc++
)
target_sources(bench-longest-palindromic-substring PRIVATE
    src/longest-palindromic-substring/bench.cpp
)

# target
add_executable(bench-longest-substring-without-repeating-characters "")
set_target_properties(bench-longest-substring-without-repeating-characters PROPERTIES OUTPUT_NAME "bench-longest-substring-without-repeating-characters")
set_target_properties(bench-longest-substring-without-repeating-characters PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-longest-substring-without-repeating-characters PRIVATE
    include
)
target_include_directories(bench-longest-substring-without-repeating-characters PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-longest-substring-without-repeating-characters PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-longest-substring-without-repeating-characters PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-longest-substring-without-repeating-characters PRIVATE nil)
else()
    target_compile_options(bench-longest-substring-without-repeating-characters PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-longest-substring-without-repeating-characters PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-longest-substring-without-repeating-characters PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-longest-substring-without-repeating-characters PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-longest-substring-without-repeating-characters PRIVATE
    -stdlib=libc++
)
target_sources(bench-longest-substring-without-repeating-characters PRIVATE
    src/longest-substring-without-repeating-characters/bench.cpp
)

# target
add_executable(bench-lowest-common-ancestor-of-a-binary-tree "")
set_target_properties(bench-lowest-common-ancestor-of-a-binary-tree PROPERTIES OUTPUT_NAME "bench-lowest-common-ancestor-of-a-binary-tree")
set_target_properties(bench-lowest-common-ancestor-of-a-binary-tree PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-lowest-common-ancestor-of-a-binary-tree PRIVATE
    include
)
target_include_directories(bench-lowest-common-ancestor-of-a-binary-tree PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-lowest-common-ancestor-of-a-binary-tree PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-lowest-common-ancestor-of-a-binary-tree PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-lowest-common-ancestor-of-a-binary-tree PRIVATE nil)
else()
    target_compile_options(bench-lowest-common-ancestor-of-a-binary-tree PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-lowest-common-ancestor-of-a-binary-tree PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-lowest-common-ancestor-of-a-binary-tree PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-lowest-common-ancestor-of-a-binary-tree PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-lowest-common-ancestor-of-a-binary-tree PRIVATE
    -stdlib=libc++
)
target_sources(bench-lowest-common-ancestor-of-a-binary-tree PRIVATE
    src/lowest-common-ancestor-of-a-binary-tree/bench.cpp
)

# target
add_executable(bench-lru-cache "")
set_target_properties(bench-lru-cache PROPERTIES OUTPUT_NAME "bench-lru-cache")
set_target_properties(bench-lru-cache PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-lru-cache PRIVATE
    include
)
target_include_directories(bench-lru-cache PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-lru-cache PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-lru-cache PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-lru-cache PRIVATE nil)
else()
    target_compile_options(bench-lru-cache PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-lru-cache PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-lru-cache PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-lru-cache PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-lru-cache PRIVATE
    -stdlib=libc++
)
target_sources(bench-lru-cache PRIVATE
    src/lru-cache/bench.cpp
)

# target
add_executable(bench-maximum-subarray "")
set_target_properties(bench-maximum-subarray PROPERTIES OUTPUT_NAME "bench-maximum-subarray")
set_target_properties(bench-maximum-subarray PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-maximum-subarray PRIVATE
    include
)
target_include_directories(bench-maximum-subarray PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-maximum-subarray PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-maximum-subarray PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-maximum-subarray PRIVATE nil)
else()
    target_compile_options(bench-maximum-subarray PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-maximum-subarray PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-maximum-subarray PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-maximum-subarray PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-maximum-subarray PRIVATE
    -stdlib=libc++
)
target_sources(bench-maximum-subarray PRIVATE
    src/maximum-subarray/bench.cpp
)

# target
add_executable(bench-merge-intervals "")
set_target_properties(bench-merge-intervals PROPERTIES OUTPUT_NAME "bench-merge-intervals")
set_target_properties(bench-merge-intervals PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-merge-intervals PRIVATE
    include
)
target_include_directories(bench-merge-intervals PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-merge-intervals PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-merge-intervals PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-merge-intervals PRIVATE nil)
else()
    target_compile_options(bench-merge-intervals PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-merge-intervals PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-merge-intervals PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-merge-intervals PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-merge-intervals PRIVATE
    -stdlib=libc++
)
target_sources(bench-merge-intervals PRIVATE
    src/merge-intervals/bench.cpp
)

# target
add_executable(bench-peak-index-in-a-mountain-array "")
set_target_properties(bench-peak-index-in-a-mountain-array PROPERTIES OUTPUT_NAME "bench-peak-index-in-a-mountain-array")
set_target_properties(bench-peak-index-in-a-mountain-array PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-peak-index-in-a-mountain-array PRIVATE
    include
)
target_include_directories(bench-peak-index-in-a-mountain-array PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-peak-index-in-a-mountain-array PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-peak-index-in-a-mountain-array PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-peak-index-in-a-mountain-array PRIVATE nil)
else()
    target_compile_options(bench-peak-index-in-a-mountain-array PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-peak-index-in-a-mountain-array PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-peak-index-in-a-mountain-array PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-peak-index-in-a-mountain-array PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-peak-index-in-a-mountain-array PRIVATE
    -stdlib=libc++
)
target_sources(bench-peak-index-in-a-mountain-array PRIVATE
    src/peak-index-in-a-mountain-array/bench.cpp
)

# target
add_executable(bench-reverse-linked-list "")
set_target_properties(bench-reverse-linked-list PROPERTIES OUTPUT_NAME "bench-reverse-linked-list")
set_target_properties(bench-reverse-linked-list PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-reverse-linked-list PRIVATE
    include
)
target_include_directories(bench-reverse-linked-list PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-reverse-linked-list PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-reverse-linked-list PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-reverse-linked-list PRIVATE nil)
else()
    target_compile_options(bench-reverse-linked-list PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-reverse-linked-list PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-reverse-linked-list PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-reverse-linked-list PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-reverse-linked-list PRIVATE
    -stdlib=libc++
)
target_sources(bench-reverse-linked-list PRIVATE
    src/reverse-linked-list/bench.cpp
)

# target
add_executable(bench-search-insert-position "")
set_target_properties(bench-search-insert-position PROPERTIES OUTPUT_NAME "bench-search-insert-position")
set_target_properties(bench-search-insert-position PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-search-insert-position PRIVATE
    include
)
target_include_directories(bench-search-insert-position PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-search-insert-position PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-search-insert-position PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-search-insert-position PRIVATE nil)
else()
    target_compile_options(bench-search-insert-position PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-search-insert-position PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-search-insert-position PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-search-insert-position PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-search-insert-position PRIVATE
    -stdlib=libc++
)
target_sources(bench-search-insert-position PRIVATE
    src/search-insert-position/bench.cpp
)

# target
add_executable(bench-serialize-and-deserialize-binary-tree "")
set_target_properties(bench-serialize-and-deserialize-binary-tree PROPERTIES OUTPUT_NAME "bench-serialize-and-deserialize-binary-tree")
set_target_properties(bench-serialize-and-deserialize-binary-tree PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-serialize-and-deserialize-binary-tree PRIVATE
    include
)
target_include_directories(bench-serialize-and-deserialize-binary-tree PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-serialize-and-deserialize-binary-tree PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-serialize-and-deserialize-binary-tree PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-serialize-and-deserialize-binary-tree PRIVATE nil)
else()
    target_compile_options(bench-serialize-and-deserialize-binary-tree PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-serialize-and-deserialize-binary-tree PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-serialize-and-deserialize-binary-tree PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-serialize-and-deserialize-binary-tree PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-serialize-and-deserialize-binary-tree PRIVATE
    -stdlib=libc++
)
target_sources(bench-serialize-and-deserialize-binary-tree PRIVATE
    src/serialize-and-deserialize-binary-tree/bench.cpp
)

# target
add_executable(bench-sliding-window-maximum "")
set_target_properties(bench-sliding-window-maximum PROPERTIES OUTPUT_NAME "bench-sliding-window-maximum")
set_target_properties(bench-sliding-window-maximum PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-sliding-window-maximum PRIVATE
    include
)
target_include_directories(bench-sliding-window-maximum PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-sliding-window-maximum PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-sliding-window-maximum PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-sliding-window-maximum PRIVATE nil)
else()
    target_compile_options(bench-sliding-window-maximum PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-sliding-window-maximum PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-sliding-window-maximum PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-sliding-window-maximum PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-sliding-window-maximum PRIVATE
    -stdlib=libc++
)
target_sources(bench-sliding-window-maximum PRIVATE
    src/sliding-window-maximum/bench.cpp
)

# target
add_executable(bench-sqrtx "")
set_target_properties(bench-sqrtx PROPERTIES OUTPUT_NAME "bench-sqrtx")
set_target_properties(bench-sqrtx PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-sqrtx PRIVATE
    include
)
target_include_directories(bench-sqrtx PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-sqrtx PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-sqrtx PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-sqrtx PRIVATE nil)
else()
    target_compile_options(bench-sqrtx PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-sqrtx PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-sqrtx PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-sqrtx PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-sqrtx PRIVATE
    -stdlib=libc++
)
target_sources(bench-sqrtx PRIVATE
    src/sqrtx/bench.cpp
)

# target
add_executable(bench-top-k-frequent-elements "")
set_target_properties(bench-top-k-frequent-elements PROPERTIES OUTPUT_NAME "bench-top-k-frequent-elements")
set_target_properties(bench-top-k-frequent-elements PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(bench-top-k-frequent-elements PRIVATE
    include
)
target_include_directories(bench-top-k-frequent-elements PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/include
)
target_compile_options(bench-top-k-frequent-elements PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(bench-top-k-frequent-elements PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(bench-top-k-frequent-elements PRIVATE nil)
else()
    target_compile_options(bench-top-k-frequent-elements PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET bench-top-k-frequent-elements PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(bench-top-k-frequent-elements PRIVATE
    benchmark_main
    benchmark
    z
)
target_link_directories(bench-top-k-frequent-elements PRIVATE
    /Users/wuxing/.xmake/packages/b/benchmark/1.6.1/8788a44ff7f44599bf804ed46e4210a7/lib
)
target_link_options(bench-top-k-frequent-elements PRIVATE
    -stdlib=libc++
)
target_sources(bench-top-k-frequent-elements PRIVATE
    src/top-k-frequent-elements/bench.cpp
)

# target
add_executable(test-binary-search "")
set_target_properties(test-binary-search PROPERTIES OUTPUT_NAME "test-binary-search")
set_target_properties(test-binary-search PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-binary-search PRIVATE
    include
)
target_include_directories(test-binary-search PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-binary-search PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-binary-search PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-binary-search PRIVATE nil)
else()
    target_compile_options(test-binary-search PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-binary-search PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-binary-search PRIVATE
    z
)
target_link_options(test-binary-search PRIVATE
    -stdlib=libc++
)
target_sources(test-binary-search PRIVATE
    src/binary-search/test.cpp
)

# target
add_executable(test-binary-tree-maximum-path-sum "")
set_target_properties(test-binary-tree-maximum-path-sum PROPERTIES OUTPUT_NAME "test-binary-tree-maximum-path-sum")
set_target_properties(test-binary-tree-maximum-path-sum PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-binary-tree-maximum-path-sum PRIVATE
    include
)
target_include_directories(test-binary-tree-maximum-path-sum PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-binary-tree-maximum-path-sum PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-binary-tree-maximum-path-sum PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-binary-tree-maximum-path-sum PRIVATE nil)
else()
    target_compile_options(test-binary-tree-maximum-path-sum PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-binary-tree-maximum-path-sum PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-binary-tree-maximum-path-sum PRIVATE
    z
)
target_link_options(test-binary-tree-maximum-path-sum PRIVATE
    -stdlib=libc++
)
target_sources(test-binary-tree-maximum-path-sum PRIVATE
    src/binary-tree-maximum-path-sum/test.cpp
)

# target
add_executable(test-course-schedule "")
set_target_properties(test-course-schedule PROPERTIES OUTPUT_NAME "test-course-schedule")
set_target_properties(test-course-schedule PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-course-schedule PRIVATE
    include
)
target_include_directories(test-course-schedule PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-course-schedule PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-course-schedule PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-course-schedule PRIVATE nil)
else()
    target_compile_options(test-course-schedule PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-course-schedule PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-course-schedule PRIVATE
    z
)
target_link_options(test-course-schedule PRIVATE
    -stdlib=libc++
)
target_sources(test-course-schedule PRIVATE
    src/course-schedule/test.cpp
)

# target
add_executable(test-delete-node-in-a-bst "")
set_target_properties(test-delete-node-in-a-bst PROPERTIES OUTPUT_NAME "test-delete-node-in-a-bst")
set_target_properties(test-delete-node-in-a-bst PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-delete-node-in-a-bst PRIVATE
    include
)
target_include_directories(test-delete-node-in-a-bst PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-delete-node-in-a-bst PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-delete-node-in-a-bst PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-delete-node-in-a-bst PRIVATE nil)
else()
    target_compile_options(test-delete-node-in-a-bst PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-delete-node-in-a-bst PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-delete-node-in-a-bst PRIVATE
    z
)
target_link_options(test-delete-node-in-a-bst PRIVATE
    -stdlib=libc++
)
target_sources(test-delete-node-in-a-bst PRIVATE
    src/delete-node-in-a-bst/test.cpp
)

# target
add_executable(test-find-the-distance-value-between-two-arrays "")
set_target_properties(test-find-the-distance-value-between-two-arrays PROPERTIES OUTPUT_NAME "test-find-the-distance-value-between-two-arrays")
set_target_properties(test-find-the-distance-value-between-two-arrays PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-find-the-distance-value-between-two-arrays PRIVATE
    include
)
target_include_directories(test-find-the-distance-value-between-two-arrays PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-find-the-distance-value-between-two-arrays PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-find-the-distance-value-between-two-arrays PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-find-the-distance-value-between-two-arrays PRIVATE nil)
else()
    target_compile_options(test-find-the-distance-value-between-two-arrays PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-find-the-distance-value-between-two-arrays PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-find-the-distance-value-between-two-arrays PRIVATE
    z
)
target_link_options(test-find-the-distance-value-between-two-arrays PRIVATE
    -stdlib=libc++
)
target_sources(test-find-the-distance-value-between-two-arrays PRIVATE
    src/find-the-distance-value-between-two-arrays/test.cpp
)

# target
add_executable(test-guess-number-higher-or-lower "")
set_target_properties(test-guess-number-higher-or-lower PROPERTIES OUTPUT_NAME "test-guess-number-higher-or-lower")
set_target_properties(test-guess-number-higher-or-lower PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-guess-number-higher-or-lower PRIVATE
    include
)
target_include_directories(test-guess-number-higher-or-lower PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-guess-number-higher-or-lower PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-guess-number-higher-or-lower PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-guess-number-higher-or-lower PRIVATE nil)
else()
    target_compile_options(test-guess-number-higher-or-lower PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-guess-number-higher-or-lower PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-guess-number-higher-or-lower PRIVATE
    z
)
target_link_options(test-guess-number-higher-or-lower PRIVATE
    -stdlib=libc++
)
target_sources(test-guess-number-higher-or-lower PRIVATE
    src/guess-number-higher-or-lower/test.cpp
)

# target
add_executable(test-kth-largest-element-in-an-array "")
set_target_properties(test-kth-largest-element-in-an-array PROPERTIES OUTPUT_NAME "test-kth-largest-element-in-an-array")
set_target_properties(test-kth-largest-element-in-an-array PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-kth-largest-element-in-an-array PRIVATE
    include
)
target_include_directories(test-kth-largest-element-in-an-array PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-kth-largest-element-in-an-array PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-kth-largest-element-in-an-array PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-kth-largest-element-in-an-array PRIVATE nil)
else()
    target_compile_options(test-kth-largest-element-in-an-array PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-kth-largest-element-in-an-array PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-kth-largest-element-in-an-array PRIVATE
    z
)
target_link_options(test-kth-largest-element-in-an-array PRIVATE
    -stdlib=libc++
)
target_sources(test-kth-largest-element-in-an-array PRIVATE
    src/kth-largest-element-in-an-array/test.cpp
)

# target
add_executable(test-leetcode "")
set_target_properties(test-leetcode PROPERTIES OUTPUT_NAME "test-leetcode")
set_target_properties(test-leetcode PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-leetcode PRIVATE
    include
)
target_include_directories(test-leetcode PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-leetcode PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-leetcode PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-leetcode PRIVATE nil)
else()
    target_compile_options(test-leetcode PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-leetcode PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-leetcode PRIVATE
    z
)
target_link_options(test-leetcode PRIVATE
    -stdlib=libc++
)
target_sources(test-leetcode PRIVATE
    src/leetcode/test.cpp
)

# target
add_executable(test-longest-palindromic-substring "")
set_target_properties(test-longest-palindromic-substring PROPERTIES OUTPUT_NAME "test-longest-palindromic-substring")
set_target_properties(test-longest-palindromic-substring PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-longest-palindromic-substring PRIVATE
    include
)
target_include_directories(test-longest-palindromic-substring PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-longest-palindromic-substring PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-longest-palindromic-substring PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-longest-palindromic-substring PRIVATE nil)
else()
    target_compile_options(test-longest-palindromic-substring PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-longest-palindromic-substring PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-longest-palindromic-substring PRIVATE
    z
)
target_link_options(test-longest-palindromic-substring PRIVATE
    -stdlib=libc++
)
target_sources(test-longest-palindromic-substring PRIVATE
    src/longest-palindromic-substring/test.cpp
)

# target
add_executable(test-longest-substring-without-repeating-characters "")
set_target_properties(test-longest-substring-without-repeating-characters PROPERTIES OUTPUT_NAME "test-longest-substring-without-repeating-characters")
set_target_properties(test-longest-substring-without-repeating-characters PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-longest-substring-without-repeating-characters PRIVATE
    include
)
target_include_directories(test-longest-substring-without-repeating-characters PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-longest-substring-without-repeating-characters PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-longest-substring-without-repeating-characters PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-longest-substring-without-repeating-characters PRIVATE nil)
else()
    target_compile_options(test-longest-substring-without-repeating-characters PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-longest-substring-without-repeating-characters PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-longest-substring-without-repeating-characters PRIVATE
    z
)
target_link_options(test-longest-substring-without-repeating-characters PRIVATE
    -stdlib=libc++
)
target_sources(test-longest-substring-without-repeating-characters PRIVATE
    src/longest-substring-without-repeating-characters/test.cpp
)

# target
add_executable(test-lowest-common-ancestor-of-a-binary-tree "")
set_target_properties(test-lowest-common-ancestor-of-a-binary-tree PROPERTIES OUTPUT_NAME "test-lowest-common-ancestor-of-a-binary-tree")
set_target_properties(test-lowest-common-ancestor-of-a-binary-tree PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-lowest-common-ancestor-of-a-binary-tree PRIVATE
    include
)
target_include_directories(test-lowest-common-ancestor-of-a-binary-tree PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-lowest-common-ancestor-of-a-binary-tree PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-lowest-common-ancestor-of-a-binary-tree PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-lowest-common-ancestor-of-a-binary-tree PRIVATE nil)
else()
    target_compile_options(test-lowest-common-ancestor-of-a-binary-tree PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-lowest-common-ancestor-of-a-binary-tree PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-lowest-common-ancestor-of-a-binary-tree PRIVATE
    z
)
target_link_options(test-lowest-common-ancestor-of-a-binary-tree PRIVATE
    -stdlib=libc++
)
target_sources(test-lowest-common-ancestor-of-a-binary-tree PRIVATE
    src/lowest-common-ancestor-of-a-binary-tree/test.cpp
)

# target
add_executable(test-lru-cache "")
set_target_properties(test-lru-cache PROPERTIES OUTPUT_NAME "test-lru-cache")
set_target_properties(test-lru-cache PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-lru-cache PRIVATE
    include
)
target_include_directories(test-lru-cache PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-lru-cache PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-lru-cache PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-lru-cache PRIVATE nil)
else()
    target_compile_options(test-lru-cache PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-lru-cache PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-lru-cache PRIVATE
    z
)
target_link_options(test-lru-cache PRIVATE
    -stdlib=libc++
)
target_sources(test-lru-cache PRIVATE
    src/lru-cache/test.cpp
)

# target
add_executable(test-maximum-subarray "")
set_target_properties(test-maximum-subarray PROPERTIES OUTPUT_NAME "test-maximum-subarray")
set_target_properties(test-maximum-subarray PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-maximum-subarray PRIVATE
    include
)
target_include_directories(test-maximum-subarray PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-maximum-subarray PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-maximum-subarray PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-maximum-subarray PRIVATE nil)
else()
    target_compile_options(test-maximum-subarray PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-maximum-subarray PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-maximum-subarray PRIVATE
    z
)
target_link_options(test-maximum-subarray PRIVATE
    -stdlib=libc++
)
target_sources(test-maximum-subarray PRIVATE
    src/maximum-subarray/test.cpp
)

# target
add_executable(test-merge-intervals "")
set_target_properties(test-merge-intervals PROPERTIES OUTPUT_NAME "test-merge-intervals")
set_target_properties(test-merge-intervals PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-merge-intervals PRIVATE
    include
)
target_include_directories(test-merge-intervals PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-merge-intervals PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-merge-intervals PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-merge-intervals PRIVATE nil)
else()
    target_compile_options(test-merge-intervals PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-merge-intervals PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-merge-intervals PRIVATE
    z
)
target_link_options(test-merge-intervals PRIVATE
    -stdlib=libc++
)
target_sources(test-merge-intervals PRIVATE
    src/merge-intervals/test.cpp
)

# target
add_executable(test-peak-index-in-a-mountain-array "")
set_target_properties(test-peak-index-in-a-mountain-array PROPERTIES OUTPUT_NAME "test-peak-index-in-a-mountain-array")
set_target_properties(test-peak-index-in-a-mountain-array PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-peak-index-in-a-mountain-array PRIVATE
    include
)
target_include_directories(test-peak-index-in-a-mountain-array PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-peak-index-in-a-mountain-array PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-peak-index-in-a-mountain-array PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-peak-index-in-a-mountain-array PRIVATE nil)
else()
    target_compile_options(test-peak-index-in-a-mountain-array PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-peak-index-in-a-mountain-array PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-peak-index-in-a-mountain-array PRIVATE
    z
)
target_link_options(test-peak-index-in-a-mountain-array PRIVATE
    -stdlib=libc++
)
target_sources(test-peak-index-in-a-mountain-array PRIVATE
    src/peak-index-in-a-mountain-array/test.cpp
)

# target
add_executable(test-reverse-linked-list "")
set_target_properties(test-reverse-linked-list PROPERTIES OUTPUT_NAME "test-reverse-linked-list")
set_target_properties(test-reverse-linked-list PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-reverse-linked-list PRIVATE
    include
)
target_include_directories(test-reverse-linked-list PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-reverse-linked-list PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-reverse-linked-list PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-reverse-linked-list PRIVATE nil)
else()
    target_compile_options(test-reverse-linked-list PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-reverse-linked-list PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-reverse-linked-list PRIVATE
    z
)
target_link_options(test-reverse-linked-list PRIVATE
    -stdlib=libc++
)
target_sources(test-reverse-linked-list PRIVATE
    src/reverse-linked-list/test.cpp
)

# target
add_executable(test-search-insert-position "")
set_target_properties(test-search-insert-position PROPERTIES OUTPUT_NAME "test-search-insert-position")
set_target_properties(test-search-insert-position PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-search-insert-position PRIVATE
    include
)
target_include_directories(test-search-insert-position PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-search-insert-position PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-search-insert-position PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-search-insert-position PRIVATE nil)
else()
    target_compile_options(test-search-insert-position PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-search-insert-position PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-search-insert-position PRIVATE
    z
)
target_link_options(test-search-insert-position PRIVATE
    -stdlib=libc++
)
target_sources(test-search-insert-position PRIVATE
    src/search-insert-position/test.cpp
)

# target
add_executable(test-serialize-and-deserialize-binary-tree "")
set_target_properties(test-serialize-and-deserialize-binary-tree PROPERTIES OUTPUT_NAME "test-serialize-and-deserialize-binary-tree")
set_target_properties(test-serialize-and-deserialize-binary-tree PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-serialize-and-deserialize-binary-tree PRIVATE
    include
)
target_include_directories(test-serialize-and-deserialize-binary-tree PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-serialize-and-deserialize-binary-tree PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-serialize-and-deserialize-binary-tree PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-serialize-and-deserialize-binary-tree PRIVATE nil)
else()
    target_compile_options(test-serialize-and-deserialize-binary-tree PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-serialize-and-deserialize-binary-tree PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-serialize-and-deserialize-binary-tree PRIVATE
    z
)
target_link_options(test-serialize-and-deserialize-binary-tree PRIVATE
    -stdlib=libc++
)
target_sources(test-serialize-and-deserialize-binary-tree PRIVATE
    src/serialize-and-deserialize-binary-tree/test.cpp
)

# target
add_executable(test-sliding-window-maximum "")
set_target_properties(test-sliding-window-maximum PROPERTIES OUTPUT_NAME "test-sliding-window-maximum")
set_target_properties(test-sliding-window-maximum PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-sliding-window-maximum PRIVATE
    include
)
target_include_directories(test-sliding-window-maximum PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-sliding-window-maximum PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-sliding-window-maximum PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-sliding-window-maximum PRIVATE nil)
else()
    target_compile_options(test-sliding-window-maximum PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-sliding-window-maximum PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-sliding-window-maximum PRIVATE
    z
)
target_link_options(test-sliding-window-maximum PRIVATE
    -stdlib=libc++
)
target_sources(test-sliding-window-maximum PRIVATE
    src/sliding-window-maximum/test.cpp
)

# target
add_executable(test-sqrtx "")
set_target_properties(test-sqrtx PROPERTIES OUTPUT_NAME "test-sqrtx")
set_target_properties(test-sqrtx PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-sqrtx PRIVATE
    include
)
target_include_directories(test-sqrtx PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-sqrtx PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-sqrtx PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-sqrtx PRIVATE nil)
else()
    target_compile_options(test-sqrtx PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-sqrtx PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-sqrtx PRIVATE
    z
)
target_link_options(test-sqrtx PRIVATE
    -stdlib=libc++
)
target_sources(test-sqrtx PRIVATE
    src/sqrtx/test.cpp
)

# target
add_executable(test-top-k-frequent-elements "")
set_target_properties(test-top-k-frequent-elements PROPERTIES OUTPUT_NAME "test-top-k-frequent-elements")
set_target_properties(test-top-k-frequent-elements PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}/build/macosx/arm64/release")
target_include_directories(test-top-k-frequent-elements PRIVATE
    include
)
target_include_directories(test-top-k-frequent-elements PRIVATE
    /Users/wuxing/.xmake/packages/c/catch2/2.13.9/1e74171e7df14d81b90514ff824992ff/include
)
target_compile_options(test-top-k-frequent-elements PRIVATE
    $<$<COMPILE_LANGUAGE:C>:-arch>
    $<$<COMPILE_LANGUAGE:CXX>:-arch>
    $<$<COMPILE_LANGUAGE:C>:arm64>
    $<$<COMPILE_LANGUAGE:CXX>:arm64>
    $<$<COMPILE_LANGUAGE:C>:-DNDEBUG>
    $<$<COMPILE_LANGUAGE:CXX>:-DNDEBUG>
)
target_compile_features(test-top-k-frequent-elements PRIVATE cxx_std_17)
if(MSVC)
    target_compile_options(test-top-k-frequent-elements PRIVATE nil)
else()
    target_compile_options(test-top-k-frequent-elements PRIVATE nil)
endif()
if(MSVC)
    set_property(TARGET test-top-k-frequent-elements PROPERTY
        MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()
target_link_libraries(test-top-k-frequent-elements PRIVATE
    z
)
target_link_options(test-top-k-frequent-elements PRIVATE
    -stdlib=libc++
)
target_sources(test-top-k-frequent-elements PRIVATE
    src/top-k-frequent-elements/test.cpp
)

